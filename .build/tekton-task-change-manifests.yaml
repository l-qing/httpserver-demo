# 需要提前创建代码仓库凭据
# kubectl create secret generic gitlab-auth --from-literal=username='xxx' --from-literal=password='xxxx'
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: change-manifests
spec:
  params:
    - name: SCHEMA
      default: http
      description: Git repository schema, default is `http`.
    - name: GIT_URL
      description: Git repository containing manifest files to update
    - name: GIT_BRANCH
      default: master
      description: Git repository branch, automatically created when the branch does not exist.
    - name: GIT_EMAIL
      default: your@email.com
    - name: GIT_NAME
      default: Your Name Here
    - name: GIT_MANIFEST_DIR
      description: Manifests files dir.
      default: .
    - name: TOOL_IMAGE # 该镜像中必须要有 git，最好还有其他工具：比如make、sed、yq等，方便更新配置。
      description: The container image.
      default: golang:1.17
    - name: UPDATE_SCRIPT
      description: The script to run.
      type: string
      default: |
        echo "hello world"
    - name: BASIC_AUTH
      description: The secret name for push git repository
      type: string
    - name: VERBOSE
      description: Log the commands that are executed during operation.
      type: string
      default: "false"
  steps:
    - name: git-push
      image: $(params.TOOL_IMAGE)
      env:
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.BASIC_AUTH)
              key: username
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.BASIC_AUTH)
              key: password
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -eu
          if [ "$(params.VERBOSE)" = "true" ] ; then
            set -x
          fi
          branch=$(params.GIT_BRANCH)
          branch=${branch#refs/heads/} # replace prefix `refs/heads/`
          git config --global user.email "$(params.GIT_EMAIL)"
          git config --global user.name "$(params.GIT_NAME)"
          git clone $(params.SCHEMA)://${GIT_USERNAME}:${GIT_PASSWORD}@$(params.GIT_URL) repo
          cd repo
          git checkout ${branch} || git checkout -b ${branch}
          cd "$(params.GIT_MANIFEST_DIR)"
          ls -l

          $(params.UPDATE_SCRIPT)

          if ! git diff --exit-code --quiet --; then
            git status
            git diff .
            git add .
            git commit -m "updated by tekton pipeline in change-manifests task"
            git push --set-upstream origin ${branch}
          else
              echo "no changes, git repository is up to date"
          fi

